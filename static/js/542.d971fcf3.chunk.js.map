{"version":3,"file":"static/js/542.d971fcf3.chunk.js","mappings":"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","sources":["api/hooks/authHandlers.mock.ts","api/hooks/categories.mock.ts","api/hooks/products.mock.ts","api/hooks/wishlistHandler.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { ApiPath } from '@/routes/path';\n\nexport const MOCK_USERS = [\n  {\n    email: 'real.dassy@gmail.com',\n    password: 'qwer123',\n    token: 'mock-token',\n  },\n];\n\nexport const authHandlers = [\n  rest.post(ApiPath.members.register, (req, res, ctx) => {\n    const { email, password } = req.body as { email: string; password: string };\n\n    if (!email || !password) {\n      return res(ctx.status(400));\n    }\n\n    const newUser = { email, password, token: 'mock-token' };\n    console.log(newUser);\n    MOCK_USERS.push(newUser);\n\n    return res(ctx.status(201), ctx.json({ email, token: newUser.token }));\n  }),\n\n  rest.post(ApiPath.members.login, (req, res, ctx) => {\n    const { email, password } = req.body as { email: string; password: string };\n    const user = MOCK_USERS.find(\n      (userInfo) => userInfo.email === email && userInfo.password === password,\n    );\n\n    if (user) {\n      return res(ctx.status(200), ctx.json({ email, token: user.token }));\n    }\n\n    return res(ctx.status(401));\n  }),\n];\n","import { rest } from 'msw';\n\nimport { ApiPath } from '@/routes/path';\n\nexport const categoriesMockHandler = [\n  rest.get(ApiPath.categories, (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n\nexport const CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 2920,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2930,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n","import { rest } from 'msw';\n\nimport { ApiPath } from '@/routes/path';\n\nexport const PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n      options: [\n        {\n          id: 1,\n          name: 'Option A',\n          quantity: 10,\n          productId: 3245119,\n        },\n        {\n          id: 2,\n          name: 'Option B',\n          quantity: 20,\n          productId: 3245119,\n        },\n      ],\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n      options: [\n        {\n          id: 3,\n          name: 'Option C',\n          quantity: 5,\n          productId: 2263833,\n        },\n      ],\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n      options: [],\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n      options: [\n        {\n          id: 4,\n          name: 'Option D',\n          quantity: 15,\n          productId: 1181831,\n        },\n      ],\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n      options: [\n        {\n          id: 5,\n          name: 'Option E',\n          quantity: 12,\n          productId: 1379982,\n        },\n      ],\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n\nexport const productsMockHandler = [\n  rest.get(ApiPath.products.root, (req, res, ctx) => {\n    const categoryId = req.url.searchParams.get('categoryId');\n    if (categoryId === '2920' || categoryId === '2930') {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    }\n    return res(ctx.status(404), ctx.json({ message: 'Category not found' }));\n  }),\n\n  rest.get(ApiPath.products.detail(':productId'), (req, res, ctx) => {\n    const productId = req.params.productId as string;\n    const product = PRODUCTS_MOCK_DATA.content.find((p) => p.id === parseInt(productId, 10));\n    if (product) {\n      return res(ctx.json(product));\n    }\n    return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\n  }),\n\n  rest.get(ApiPath.products.options(':productId'), (req, res, ctx) => {\n    const productId = req.params.productId as string;\n    const product = PRODUCTS_MOCK_DATA.content.find((p) => p.id === parseInt(productId, 10));\n    if (product) {\n      return res(ctx.json(product.options));\n    }\n    return res(ctx.status(404), ctx.json({ message: 'Options not found' }));\n  }),\n];\n","import { rest } from 'msw';\n\nimport { ApiPath } from '@/routes/path';\n\nexport const MOCK_WISHES = {\n  content: [\n    {\n      id: 1,\n      product: {\n        id: 1,\n        name: 'Product A',\n        price: 100,\n        imageUrl: 'http://example.com/product-a.jpg',\n      },\n    },\n    {\n      id: 2,\n      product: {\n        id: 2,\n        name: 'Product B',\n        price: 150,\n        imageUrl: 'http://example.com/product-b.jpg',\n      },\n    },\n  ],\n  pageable: {\n    sort: {\n      sorted: true,\n      unsorted: false,\n      empty: false,\n    },\n    pageNumber: 0,\n    pageSize: 10,\n    offset: 0,\n    unpaged: false,\n    paged: true,\n  },\n  totalPages: 5,\n  totalElements: 50,\n  last: false,\n  number: 0,\n  size: 10,\n  numberOfElements: 2,\n  first: true,\n  empty: false,\n};\n\nexport const wishlistHandler = [\n  rest.get(ApiPath.wishes.root, (req, res, ctx) => {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res(ctx.status(401), ctx.json({ message: 'Unauthorized' }));\n    }\n\n    return res(ctx.status(200), ctx.json(MOCK_WISHES));\n  }),\n\n  rest.post(ApiPath.wishes.root, (req, res, ctx) => {\n    const { productId } = req.body as { productId: number };\n    const newWish = {\n      id: Date.now(),\n      product: {\n        id: productId,\n        name: `Product ${productId}`,\n        price: 100,\n        imageUrl: `http://example.com/product-${productId}.jpg`,\n      },\n    };\n    MOCK_WISHES.content.push(newWish);\n    return res(ctx.status(201), ctx.json(newWish));\n  }),\n\n  rest.delete(ApiPath.wishes.detail(':wishId'), (req, res, ctx) => {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res(ctx.status(401), ctx.json({ message: 'Unauthorized' }));\n    }\n\n    const wishId = Array.isArray(req.params.wishId) ? req.params.wishId[0] : req.params.wishId;\n    const parsedWishId = parseInt(wishId, 10);\n    const index = MOCK_WISHES.content.findIndex((wish) => wish.id === parsedWishId);\n\n    if (index === -1) {\n      return res(ctx.status(404), ctx.json({ message: 'Wish not found' }));\n    }\n\n    MOCK_WISHES.content.splice(index, 1);\n\n    return res(ctx.status(204));\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { authHandlers } from '@/api/hooks/authHandlers.mock';\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\nimport { productsMockHandler } from '@/api/hooks/products.mock';\nimport { wishlistHandler } from '@/api/hooks/wishlistHandler.mock';\n\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...authHandlers,\n  ...wishlistHandler,\n);\n"],"names":["MOCK_USERS","email","password","token","authHandlers","rest","post","ApiPath","members","register","req","res","ctx","body","status","newUser","console","log","push","json","login","user","find","userInfo","categoriesMockHandler","get","categories","_","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","PRODUCTS_MOCK_DATA","content","price","options","quantity","productId","number","totalElements","size","last","productsMockHandler","products","root","categoryId","url","searchParams","message","detail","params","product","p","parseInt","MOCK_WISHES","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","totalPages","numberOfElements","first","wishlistHandler","wishes","authHeader","headers","startsWith","newWish","Date","now","concat","delete","wishId","Array","isArray","parsedWishId","index","findIndex","wish","splice","worker","setupWorker"],"sourceRoot":""}